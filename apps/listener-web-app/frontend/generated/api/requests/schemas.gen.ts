// This file is auto-generated by @hey-api/openapi-ts

export const $APIKey = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'apiKey'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        in: {
            '$ref': '#/components/schemas/APIKeyIn'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['in', 'name'],
    title: 'APIKey'
} as const;

export const $APIKeyIn = {
    type: 'string',
    enum: ['query', 'header', 'cookie'],
    title: 'APIKeyIn'
} as const;

export const $AgentRunRequest = {
    properties: {
        appName: {
            type: 'string',
            title: 'Appname'
        },
        sessionId: {
            type: 'string',
            title: 'Sessionid'
        },
        newMessage: {
            type: 'string',
            title: 'Newmessage'
        },
        streaming: {
            type: 'boolean',
            title: 'Streaming',
            default: false
        }
    },
    type: 'object',
    required: ['appName', 'sessionId', 'newMessage'],
    title: 'AgentRunRequest'
} as const;

export const $AuthConfig = {
    properties: {
        authScheme: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/APIKey'
                },
                {
                    '$ref': '#/components/schemas/HTTPBase'
                },
                {
                    '$ref': '#/components/schemas/OAuth2'
                },
                {
                    '$ref': '#/components/schemas/OpenIdConnect'
                },
                {
                    '$ref': '#/components/schemas/HTTPBearer'
                },
                {
                    '$ref': '#/components/schemas/OpenIdConnectWithConfig'
                }
            ],
            title: 'Authscheme'
        },
        rawAuthCredential: {
            '$ref': '#/components/schemas/AuthCredential'
        },
        exchangedAuthCredential: {
            '$ref': '#/components/schemas/AuthCredential'
        },
        credentialKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Credentialkey'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['authScheme'],
    title: 'AuthConfig',
    description: `The auth config sent by tool asking client to collect auth credentials and

adk and client will help to fill in the response`
} as const;

export const $AuthCredential = {
    properties: {
        authType: {
            '$ref': '#/components/schemas/AuthCredentialTypes'
        },
        resourceRef: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Resourceref'
        },
        apiKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Apikey'
        },
        http: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/HttpAuth'
                },
                {
                    type: 'null'
                }
            ]
        },
        serviceAccount: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ServiceAccount'
                },
                {
                    type: 'null'
                }
            ]
        },
        oauth2: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OAuth2Auth'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['authType'],
    title: 'AuthCredential',
    description: `Data class representing an authentication credential.

To exchange for the actual credential, please use
CredentialExchanger.exchange_credential().

Examples: API Key Auth
AuthCredential(
    auth_type=AuthCredentialTypes.API_KEY,
    api_key="1234",
)

Example: HTTP Auth
AuthCredential(
    auth_type=AuthCredentialTypes.HTTP,
    http=HttpAuth(
        scheme="basic",
        credentials=HttpCredentials(username="user", password="password"),
    ),
)

Example: OAuth2 Bearer Token in HTTP Header
AuthCredential(
    auth_type=AuthCredentialTypes.HTTP,
    http=HttpAuth(
        scheme="bearer",
        credentials=HttpCredentials(token="eyAkaknabna...."),
    ),
)

Example: OAuth2 Auth with Authorization Code Flow
AuthCredential(
    auth_type=AuthCredentialTypes.OAUTH2,
    oauth2=OAuth2Auth(
        client_id="1234",
        client_secret="secret",
    ),
)

Example: OpenID Connect Auth
AuthCredential(
    auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,
    oauth2=OAuth2Auth(
        client_id="1234",
        client_secret="secret",
        redirect_uri="https://example.com",
        scopes=["scope1", "scope2"],
    ),
)

Example: Auth with resource reference
AuthCredential(
    auth_type=AuthCredentialTypes.API_KEY,
    resource_ref="projects/1234/locations/us-central1/resources/resource1",
)`
} as const;

export const $AuthCredentialTypes = {
    type: 'string',
    enum: ['apiKey', 'http', 'oauth2', 'openIdConnect', 'serviceAccount'],
    title: 'AuthCredentialTypes',
    description: 'Represents the type of authentication credential.'
} as const;

export const $Blob = {
    properties: {
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname',
            description: 'Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls.'
        },
        data: {
            anyOf: [
                {
                    type: 'string',
                    format: 'base64url'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'Required. Raw bytes.'
        },
        mimeType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mimetype',
            description: 'Required. The IANA standard MIME type of the source data.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'Blob',
    description: 'Content blob.'
} as const;

export const $BroadcastSchedule = {
    type: 'string',
    enum: ['daily', 'weekly'],
    title: 'BroadcastSchedule',
    description: 'Enum representing the broadcast schedule of a listener program.'
} as const;

export const $CodeExecutionResult = {
    properties: {
        outcome: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Outcome'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Required. Outcome of the code execution.'
        },
        output: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Output',
            description: 'Optional. Contains stdout when code execution is successful, stderr or other description otherwise.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'CodeExecutionResult',
    description: `Result of executing the [ExecutableCode].

Always follows a \`part\` containing the [ExecutableCode].`
} as const;

export const $Content = {
    properties: {
        parts: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/Part'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parts',
            description: `List of parts that constitute a single message. Each part may have
      a different IANA MIME type.`
        },
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role',
            description: `Optional. The producer of the content. Must be either 'user' or
      'model'. Useful to set for multi-turn conversations, otherwise can be
      empty. If role is not specified, SDK will determine the role.`
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'Content',
    description: 'Contains the multi-part content of a message.'
} as const;

export const $Event = {
    properties: {
        content: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Content'
                },
                {
                    type: 'null'
                }
            ]
        },
        groundingMetadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GroundingMetadata'
                },
                {
                    type: 'null'
                }
            ]
        },
        partial: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Partial'
        },
        turnComplete: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Turncomplete'
        },
        errorCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errorcode'
        },
        errorMessage: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errormessage'
        },
        interrupted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Interrupted'
        },
        customMetadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custommetadata'
        },
        usageMetadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GenerateContentResponseUsageMetadata'
                },
                {
                    type: 'null'
                }
            ]
        },
        invocationId: {
            type: 'string',
            title: 'Invocationid',
            default: ''
        },
        author: {
            type: 'string',
            title: 'Author'
        },
        actions: {
            '$ref': '#/components/schemas/EventActions'
        },
        longRunningToolIds: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array',
                    uniqueItems: true
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longrunningtoolids'
        },
        branch: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Branch'
        },
        id: {
            type: 'string',
            title: 'Id',
            default: ''
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['author'],
    title: 'Event',
    description: `Represents an event in a conversation between agents and users.

It is used to store the content of the conversation, as well as the actions
taken by the agents like function calls, etc.

Attributes:
  invocation_id: The invocation ID of the event.
  author: "user" or the name of the agent, indicating who appended the event
    to the session.
  actions: The actions taken by the agent.
  long_running_tool_ids: The ids of the long running function calls.
  branch: The branch of the event.
  id: The unique identifier of the event.
  timestamp: The timestamp of the event.
  is_final_response: Whether the event is the final response of the agent.
  get_function_calls: Returns the function calls in the event.`
} as const;

export const $EventActions = {
    properties: {
        skipSummarization: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Skipsummarization'
        },
        stateDelta: {
            additionalProperties: true,
            type: 'object',
            title: 'Statedelta'
        },
        artifactDelta: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Artifactdelta'
        },
        transferToAgent: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transfertoagent'
        },
        escalate: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escalate'
        },
        requestedAuthConfigs: {
            additionalProperties: {
                '$ref': '#/components/schemas/AuthConfig'
            },
            type: 'object',
            title: 'Requestedauthconfigs'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventActions',
    description: 'Represents the actions attached to an event.'
} as const;

export const $ExecutableCode = {
    properties: {
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code',
            description: 'Required. The code to be executed.'
        },
        language: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Language'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Required. Programming language of the `code`.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ExecutableCode',
    description: `Code generated by the model that is meant to be executed, and the result returned to the model.

Generated when using the [FunctionDeclaration] tool and
[FunctionCallingConfig] mode is set to [Mode.CODE].`
} as const;

export const $FileData = {
    properties: {
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname',
            description: 'Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls.'
        },
        fileUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fileuri',
            description: 'Required. URI.'
        },
        mimeType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mimetype',
            description: 'Required. The IANA standard MIME type of the source data.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FileData',
    description: 'URI based data.'
} as const;

export const $FunctionCall = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: `The unique id of the function call. If populated, the client to execute the
   \`function_call\` and return the response with the matching \`id\`.`
        },
        args: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Args',
            description: 'Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'Required. The name of the function to call. Matches [FunctionDeclaration.name].'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FunctionCall',
    description: 'A function call.'
} as const;

export const $FunctionResponse = {
    properties: {
        willContinue: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Willcontinue',
            description: 'Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished.'
        },
        scheduling: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FunctionResponseScheduling'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE.'
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].'
        },
        response: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response',
            description: 'Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FunctionResponse',
    description: 'A function response.'
} as const;

export const $FunctionResponseScheduling = {
    type: 'string',
    enum: ['SCHEDULING_UNSPECIFIED', 'SILENT', 'WHEN_IDLE', 'INTERRUPT'],
    title: 'FunctionResponseScheduling',
    description: 'Specifies how the response should be scheduled in the conversation.'
} as const;

export const $GenerateContentResponseUsageMetadata = {
    properties: {
        cacheTokensDetails: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ModalityTokenCount'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cachetokensdetails',
            description: 'Output only. List of modalities of the cached content in the request input.'
        },
        cachedContentTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cachedcontenttokencount',
            description: 'Output only. Number of tokens in the cached part in the input (the cached content).'
        },
        candidatesTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Candidatestokencount',
            description: 'Number of tokens in the response(s).'
        },
        candidatesTokensDetails: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ModalityTokenCount'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Candidatestokensdetails',
            description: 'Output only. List of modalities that were returned in the response.'
        },
        promptTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prompttokencount',
            description: 'Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content.'
        },
        promptTokensDetails: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ModalityTokenCount'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prompttokensdetails',
            description: 'Output only. List of modalities that were processed in the request input.'
        },
        thoughtsTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thoughtstokencount',
            description: 'Output only. Number of tokens present in thoughts output.'
        },
        toolUsePromptTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tooluseprompttokencount',
            description: 'Output only. Number of tokens present in tool-use prompt(s).'
        },
        toolUsePromptTokensDetails: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ModalityTokenCount'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tooluseprompttokensdetails',
            description: 'Output only. List of modalities that were processed for tool-use request inputs.'
        },
        totalTokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totaltokencount',
            description: 'Total token count for prompt, response candidates, and tool-use prompts (if present).'
        },
        trafficType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TrafficType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GenerateContentResponseUsageMetadata',
    description: 'Usage metadata about response(s).'
} as const;

export const $GroundingChunk = {
    properties: {
        retrievedContext: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GroundingChunkRetrievedContext'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Grounding chunk from context retrieved by the retrieval tools.'
        },
        web: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GroundingChunkWeb'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Grounding chunk from the web.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GroundingChunk',
    description: 'Grounding chunk.'
} as const;

export const $GroundingChunkRetrievedContext = {
    properties: {
        ragChunk: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RagChunk'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool.'
        },
        text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Text',
            description: 'Text of the attribution.'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: 'Title of the attribution.'
        },
        uri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uri',
            description: 'URI reference of the attribution.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GroundingChunkRetrievedContext',
    description: 'Chunk from context retrieved by the retrieval tools.'
} as const;

export const $GroundingChunkWeb = {
    properties: {
        domain: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Domain',
            description: 'Domain of the (original) URI.'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: 'Title of the chunk.'
        },
        uri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uri',
            description: 'URI reference of the chunk.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GroundingChunkWeb',
    description: 'Chunk from the web.'
} as const;

export const $GroundingMetadata = {
    properties: {
        groundingChunks: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/GroundingChunk'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groundingchunks',
            description: 'List of supporting references retrieved from specified grounding source.'
        },
        groundingSupports: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/GroundingSupport'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groundingsupports',
            description: 'Optional. List of grounding support.'
        },
        retrievalMetadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RetrievalMetadata'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. Output only. Retrieval metadata.'
        },
        retrievalQueries: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retrievalqueries',
            description: 'Optional. Queries executed by the retrieval tools.'
        },
        searchEntryPoint: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SearchEntryPoint'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. Google search entry for the following-up web searches.'
        },
        webSearchQueries: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Websearchqueries',
            description: 'Optional. Web search queries for the following-up web search.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GroundingMetadata',
    description: 'Metadata returned to client when grounding is enabled.'
} as const;

export const $GroundingSupport = {
    properties: {
        confidenceScores: {
            anyOf: [
                {
                    items: {
                        type: 'number'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidencescores',
            description: 'Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices.'
        },
        groundingChunkIndices: {
            anyOf: [
                {
                    items: {
                        type: 'integer'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groundingchunkindices',
            description: "A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim."
        },
        segment: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Segment'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Segment of the content this support belongs to.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'GroundingSupport',
    description: 'Grounding support.'
} as const;

export const $HTTPBase = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'http'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        scheme: {
            type: 'string',
            title: 'Scheme'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['scheme'],
    title: 'HTTPBase'
} as const;

export const $HTTPBearer = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'http'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        scheme: {
            type: 'string',
            const: 'bearer',
            title: 'Scheme',
            default: 'bearer'
        },
        bearerFormat: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bearerformat'
        }
    },
    additionalProperties: true,
    type: 'object',
    title: 'HTTPBearer'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $HttpAuth = {
    properties: {
        scheme: {
            type: 'string',
            title: 'Scheme'
        },
        credentials: {
            '$ref': '#/components/schemas/HttpCredentials'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['scheme', 'credentials'],
    title: 'HttpAuth',
    description: 'The credentials and metadata for HTTP authentication.'
} as const;

export const $HttpCredentials = {
    properties: {
        username: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Username'
        },
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token'
        }
    },
    additionalProperties: true,
    type: 'object',
    title: 'HttpCredentials',
    description: 'Represents the secret token value for HTTP authentication, like user name, password, oauth token, etc.'
} as const;

export const $Language = {
    type: 'string',
    enum: ['LANGUAGE_UNSPECIFIED', 'PYTHON'],
    title: 'Language',
    description: 'Required. Programming language of the `code`.'
} as const;

export const $ListenerCreateSchema = {
    properties: {},
    type: 'object',
    title: 'ListenerCreateSchema',
    description: `Schema for creating a Listener.

This schema is used for the signup API.`
} as const;

export const $ListenerProgramCalendarSegmentSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        title: {
            type: 'string',
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        programId: {
            type: 'string',
            title: 'Programid',
            description: '番組ID'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'リスナーID'
        },
        order: {
            type: 'integer',
            title: 'Order',
            description: '番組コーナーの順序'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'calendar'
        },
        overrideRadioCasts: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        lastReadTimestamp: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastreadtimestamp',
            description: '最終読み取りタイムスタンプ'
        },
        startOffsetDays: {
            type: 'integer',
            title: 'Startoffsetdays',
            description: '検索開始日 現在日からのオフセット日数'
        },
        endOffsetDays: {
            type: 'integer',
            title: 'Endoffsetdays',
            description: '検索終了日 現在日からのオフセット日数'
        },
        calendarId: {
            type: 'string',
            title: 'Calendarid',
            description: '予定を取得するGoogle Calendarのcalendar id（基本的にはprimaryを設定）'
        }
    },
    type: 'object',
    required: ['title', 'programId', 'listenerId', 'order', 'startOffsetDays', 'endOffsetDays', 'calendarId'],
    title: 'ListenerProgramCalendarSegmentSchema',
    description: 'Schema for ListenerProgramCalendarSegment response.'
} as const;

export const $ListenerProgramCalendarSegmentUpdate = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order',
            description: '番組コーナーの順序'
        },
        overrideRadioCasts: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'calendar'
        },
        startOffsetDays: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Startoffsetdays',
            description: '検索開始日 現在日からのオフセット日数'
        },
        endOffsetDays: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Endoffsetdays',
            description: '検索終了日 現在日からのオフセット日数'
        },
        calendarId: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calendarid',
            description: '予定を取得するGoogle Calendarのcalendar id（基本的にはprimaryを設定）'
        }
    },
    type: 'object',
    title: 'ListenerProgramCalendarSegmentUpdate',
    description: 'Schema for updating a ListenerProgramCalendarSegment.'
} as const;

export const $ListenerProgramCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 100,
            minLength: 1,
            title: 'Title',
            description: 'ラジオ番組のタイトル'
        },
        description: {
            type: 'string',
            maxLength: 1000,
            minLength: 1,
            title: 'Description',
            description: 'ラジオ番組の説明'
        },
        programMinutes: {
            type: 'integer',
            title: 'Programminutes',
            description: 'ラジオ番組の分数（10分、15分、20分、30分から選択）'
        },
        insertMusic: {
            type: 'boolean',
            title: 'Insertmusic',
            description: '音楽コーナーを作成するかどうか',
            default: true
        },
        baseRadioCastIds: {
            items: {
                type: 'string'
            },
            type: 'array',
            maxItems: 2,
            minItems: 1,
            title: 'Baseradiocastids',
            description: 'ラジオパーソナリティのIDリスト（最大2人まで）'
        },
        broadcastSchedule: {
            '$ref': '#/components/schemas/BroadcastSchedule',
            description: '配信スケジュール（daily:日毎、weekly:週ごと）',
            default: 'daily'
        },
        broadcastDayofweek: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Broadcastdayofweek',
            description: '週ごと配信の場合の配信曜日リスト（monday,tuesday,wednesday,thursday,friday,saturday,sundayのいずれか）'
        },
        status: {
            '$ref': '#/components/schemas/ProgramStatus',
            description: '番組ステータス（draft:下書き、active:アクティブ、pause:一時停止）',
            default: 'draft'
        },
        publishSetting: {
            '$ref': '#/components/schemas/PublishSetting',
            description: '公開設定（private:非公開、limited:限定公開、publish:公開）',
            default: 'private'
        },
        privateKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Privatekey',
            description: '限定公開用のプライベートキー（32文字以上、limited設定時に必須）'
        },
        coverArtUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Coverarturi',
            description: 'ポッドキャストカバーアート画像のURI（gs://形式）'
        }
    },
    type: 'object',
    required: ['title', 'description', 'programMinutes'],
    title: 'ListenerProgramCreateSchema',
    description: 'Schema for creating a ListenerProgram.'
} as const;

export const $ListenerProgramGmailSegmentSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        title: {
            type: 'string',
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        programId: {
            type: 'string',
            title: 'Programid',
            description: '番組ID'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'リスナーID'
        },
        order: {
            type: 'integer',
            title: 'Order',
            description: '番組コーナーの順序'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'gmail'
        },
        overrideRadioCasts: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        lastReadTimestamp: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastreadtimestamp',
            description: '最終読み取りタイムスタンプ'
        },
        filter: {
            type: 'string',
            title: 'Filter',
            description: 'Gmailのクエリ'
        },
        startOffsetDays: {
            type: 'integer',
            title: 'Startoffsetdays',
            description: '検索開始日 現在日からのオフセット日数'
        },
        endOffsetDays: {
            type: 'integer',
            title: 'Endoffsetdays',
            description: '検索終了日 現在日からのオフセット日数'
        }
    },
    type: 'object',
    required: ['title', 'programId', 'listenerId', 'order', 'filter', 'startOffsetDays', 'endOffsetDays'],
    title: 'ListenerProgramGmailSegmentSchema',
    description: 'Schema for ListenerProgramGmailSegment response.'
} as const;

export const $ListenerProgramGmailSegmentUpdate = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order',
            description: '番組コーナーの順序'
        },
        overrideRadioCasts: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'gmail'
        },
        filter: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Filter',
            description: 'Gmailのクエリ'
        },
        startOffsetDays: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Startoffsetdays',
            description: '検索開始日 現在日からのオフセット日数'
        },
        endOffsetDays: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Endoffsetdays',
            description: '検索終了日 現在日からのオフセット日数'
        }
    },
    type: 'object',
    title: 'ListenerProgramGmailSegmentUpdate',
    description: 'Schema for updating a ListenerProgramGmailSegment.'
} as const;

export const $ListenerProgramRSSSegmentSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        title: {
            type: 'string',
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        programId: {
            type: 'string',
            title: 'Programid',
            description: '番組ID'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'リスナーID'
        },
        order: {
            type: 'integer',
            title: 'Order',
            description: '番組コーナーの順序'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'rss'
        },
        overrideRadioCasts: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        lastReadTimestamp: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastreadtimestamp',
            description: '最終読み取りタイムスタンプ'
        },
        feedUrl: {
            type: 'string',
            title: 'Feedurl',
            description: 'RSS FeedのURL'
        }
    },
    type: 'object',
    required: ['title', 'programId', 'listenerId', 'order', 'feedUrl'],
    title: 'ListenerProgramRSSSegmentSchema',
    description: 'Schema for ListenerProgramRSSSegment response.'
} as const;

export const $ListenerProgramRSSSegmentUpdate = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order',
            description: '番組コーナーの順序'
        },
        overrideRadioCasts: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'rss'
        },
        feedUrl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedurl',
            description: 'RSS FeedのURL'
        }
    },
    type: 'object',
    title: 'ListenerProgramRSSSegmentUpdate',
    description: 'Schema for updating a ListenerProgramRSSSegment.'
} as const;

export const $ListenerProgramSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        title: {
            type: 'string',
            title: 'Title',
            description: 'ラジオ番組のタイトル'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'ラジオ番組の説明'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'リスナーID'
        },
        programMinutes: {
            type: 'integer',
            title: 'Programminutes',
            description: 'ラジオ番組の分数（10分、15分、20分、30分から選択）'
        },
        insertMusic: {
            type: 'boolean',
            title: 'Insertmusic',
            description: '音楽コーナーを作成するかどうか'
        },
        baseRadioCastIds: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Baseradiocastids',
            description: 'ラジオパーソナリティのIDリスト（最大2人まで）'
        },
        broadcastSchedule: {
            '$ref': '#/components/schemas/BroadcastSchedule',
            description: '配信スケジュール（日毎、週ごと）'
        },
        broadcastDayofweek: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Broadcastdayofweek',
            description: '週ごと配信の場合の配信曜日リスト（monday,tuesday,wednesday,thursday,friday,saturday,sundayのいずれか）'
        },
        status: {
            '$ref': '#/components/schemas/ProgramStatus',
            description: '番組ステータス（draft,active,pause）'
        },
        publishSetting: {
            '$ref': '#/components/schemas/PublishSetting',
            description: '公開設定（private:非公開、limited:限定公開、publish:公開）'
        },
        privateKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Privatekey',
            description: '限定公開用のプライベートキー（32文字以上）'
        },
        publishedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Publishedat',
            description: '公開日時'
        },
        numberOfBroadcast: {
            type: 'integer',
            title: 'Numberofbroadcast',
            description: '配信回数',
            default: 0
        },
        coverArtUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Coverarturi',
            description: 'ポッドキャストカバーアート画像のURI（gs://形式）'
        }
    },
    type: 'object',
    required: ['title', 'description', 'listenerId', 'programMinutes', 'insertMusic', 'baseRadioCastIds', 'broadcastSchedule', 'broadcastDayofweek', 'status', 'publishSetting'],
    title: 'ListenerProgramSchema',
    description: 'Schema for ListenerProgram response.'
} as const;

export const $ListenerProgramUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: 'ラジオ番組のタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'ラジオ番組の説明'
        },
        programMinutes: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Programminutes',
            description: 'ラジオ番組の分数（10分、15分、20分、30分から選択）'
        },
        insertMusic: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Insertmusic',
            description: '音楽コーナーを作成するかどうか'
        },
        baseRadioCastIds: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array',
                    maxItems: 2,
                    minItems: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Baseradiocastids',
            description: 'ラジオパーソナリティのIDリスト（最大2人まで）'
        },
        broadcastSchedule: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BroadcastSchedule'
                },
                {
                    type: 'null'
                }
            ],
            description: '配信スケジュール（daily:日毎、weekly:週ごと）'
        },
        broadcastDayofweek: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Broadcastdayofweek',
            description: '週ごと配信の場合の配信曜日リスト（monday,tuesday,wednesday,thursday,friday,saturday,sundayのいずれか）'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProgramStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: '番組ステータス（draft:下書き、active:アクティブ、pause:一時停止）'
        },
        publishSetting: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PublishSetting'
                },
                {
                    type: 'null'
                }
            ],
            description: '公開設定（private:非公開、limited:限定公開、publish:公開）'
        },
        privateKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Privatekey',
            description: '限定公開用のプライベートキー（32文字以上、limited設定時に必須）'
        },
        publishedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Publishedat',
            description: '公開日時'
        },
        coverArtUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Coverarturi',
            description: 'ポッドキャストカバーアート画像のURI（gs://形式）'
        }
    },
    type: 'object',
    title: 'ListenerProgramUpdateSchema',
    description: 'Schema for updating a ListenerProgram.'
} as const;

export const $ListenerProgramWebSegmentSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        title: {
            type: 'string',
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        programId: {
            type: 'string',
            title: 'Programid',
            description: '番組ID'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'リスナーID'
        },
        order: {
            type: 'integer',
            title: 'Order',
            description: '番組コーナーの順序'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'web'
        },
        overrideRadioCasts: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        lastReadTimestamp: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastreadtimestamp',
            description: '最終読み取りタイムスタンプ'
        },
        urls: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Urls',
            description: 'URLのリスト'
        }
    },
    type: 'object',
    required: ['title', 'programId', 'listenerId', 'order'],
    title: 'ListenerProgramWebSegmentSchema',
    description: 'Schema for ListenerProgramWebSegment response.'
} as const;

export const $ListenerProgramWebSegmentUpdate = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: '番組コーナーのタイトル'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '番組コーナーの説明'
        },
        constraints: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000,
                    minLength: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraints',
            description: '番組コーナーの制約条件（例：「定例は除く」「政治的な内容は除く」「AIについては話さない」「最終更新日以降の情報だけ取得する」等）'
        },
        order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order',
            description: '番組コーナーの順序'
        },
        overrideRadioCasts: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overrideradiocasts',
            description: 'このコーナーだけ異なるラジオパーソナリティーが話す場合に設定'
        },
        segmentType: {
            '$ref': '#/components/schemas/SegmentType',
            default: 'web'
        },
        urls: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Urls',
            description: 'URLのリスト'
        }
    },
    type: 'object',
    title: 'ListenerProgramWebSegmentUpdate',
    description: 'Schema for updating a ListenerProgramWebSegment.'
} as const;

export const $ListenerSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname'
        },
        scopes: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Scopes'
        }
    },
    type: 'object',
    required: ['id', 'email'],
    title: 'ListenerSchema',
    description: 'Schema for Listener response.'
} as const;

export const $MediaModality = {
    type: 'string',
    enum: ['MODALITY_UNSPECIFIED', 'TEXT', 'IMAGE', 'VIDEO', 'AUDIO', 'DOCUMENT'],
    title: 'MediaModality',
    description: 'Server content modalities.'
} as const;

export const $ModalityTokenCount = {
    properties: {
        modality: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MediaModality'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The modality associated with this token count.'
        },
        tokenCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tokencount',
            description: 'Number of tokens.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ModalityTokenCount',
    description: 'Represents token counting info for a single modality.'
} as const;

export const $OAuth2 = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'oauth2'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        flows: {
            '$ref': '#/components/schemas/OAuthFlows'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['flows'],
    title: 'OAuth2'
} as const;

export const $OAuth2Auth = {
    properties: {
        clientId: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clientid'
        },
        clientSecret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clientsecret'
        },
        authUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Authuri'
        },
        state: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State'
        },
        redirectUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Redirecturi'
        },
        authResponseUri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Authresponseuri'
        },
        authCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Authcode'
        },
        accessToken: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Accesstoken'
        },
        refreshToken: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refreshtoken'
        },
        expiresAt: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expiresat'
        },
        expiresIn: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expiresin'
        }
    },
    additionalProperties: true,
    type: 'object',
    title: 'OAuth2Auth',
    description: 'Represents credential value and its metadata for a OAuth2 credential.'
} as const;

export const $OAuthFlowAuthorizationCode = {
    properties: {
        refreshUrl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refreshurl'
        },
        scopes: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Scopes',
            default: {}
        },
        authorizationUrl: {
            type: 'string',
            title: 'Authorizationurl'
        },
        tokenUrl: {
            type: 'string',
            title: 'Tokenurl'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['authorizationUrl', 'tokenUrl'],
    title: 'OAuthFlowAuthorizationCode'
} as const;

export const $OAuthFlowClientCredentials = {
    properties: {
        refreshUrl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refreshurl'
        },
        scopes: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Scopes',
            default: {}
        },
        tokenUrl: {
            type: 'string',
            title: 'Tokenurl'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['tokenUrl'],
    title: 'OAuthFlowClientCredentials'
} as const;

export const $OAuthFlowImplicit = {
    properties: {
        refreshUrl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refreshurl'
        },
        scopes: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Scopes',
            default: {}
        },
        authorizationUrl: {
            type: 'string',
            title: 'Authorizationurl'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['authorizationUrl'],
    title: 'OAuthFlowImplicit'
} as const;

export const $OAuthFlowPassword = {
    properties: {
        refreshUrl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refreshurl'
        },
        scopes: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Scopes',
            default: {}
        },
        tokenUrl: {
            type: 'string',
            title: 'Tokenurl'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['tokenUrl'],
    title: 'OAuthFlowPassword'
} as const;

export const $OAuthFlows = {
    properties: {
        implicit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OAuthFlowImplicit'
                },
                {
                    type: 'null'
                }
            ]
        },
        password: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OAuthFlowPassword'
                },
                {
                    type: 'null'
                }
            ]
        },
        clientCredentials: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OAuthFlowClientCredentials'
                },
                {
                    type: 'null'
                }
            ]
        },
        authorizationCode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OAuthFlowAuthorizationCode'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    additionalProperties: true,
    type: 'object',
    title: 'OAuthFlows'
} as const;

export const $OpenIdConnect = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'openIdConnect'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        openIdConnectUrl: {
            type: 'string',
            title: 'Openidconnecturl'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['openIdConnectUrl'],
    title: 'OpenIdConnect'
} as const;

export const $OpenIdConnectWithConfig = {
    properties: {
        type: {
            '$ref': '#/components/schemas/SecuritySchemeType',
            default: 'openIdConnect'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        authorization_endpoint: {
            type: 'string',
            title: 'Authorization Endpoint'
        },
        token_endpoint: {
            type: 'string',
            title: 'Token Endpoint'
        },
        userinfo_endpoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userinfo Endpoint'
        },
        revocation_endpoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Revocation Endpoint'
        },
        token_endpoint_auth_methods_supported: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Endpoint Auth Methods Supported'
        },
        grant_types_supported: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Types Supported'
        },
        scopes: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scopes'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['authorization_endpoint', 'token_endpoint'],
    title: 'OpenIdConnectWithConfig'
} as const;

export const $Outcome = {
    type: 'string',
    enum: ['OUTCOME_UNSPECIFIED', 'OUTCOME_OK', 'OUTCOME_FAILED', 'OUTCOME_DEADLINE_EXCEEDED'],
    title: 'Outcome',
    description: 'Required. Outcome of the code execution.'
} as const;

export const $Part = {
    properties: {
        videoMetadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VideoMetadata'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Metadata for a given video.'
        },
        thought: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thought',
            description: 'Indicates if the part is thought from the model.'
        },
        inlineData: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Blob'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. Inlined bytes data.'
        },
        fileData: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FileData'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. URI based data.'
        },
        thoughtSignature: {
            anyOf: [
                {
                    type: 'string',
                    format: 'base64url'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thoughtsignature',
            description: 'An opaque signature for the thought so it can be reused in subsequent requests.'
        },
        codeExecutionResult: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CodeExecutionResult'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. Result of executing the [ExecutableCode].'
        },
        executableCode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ExecutableCode'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. Code generated by the model that is meant to be executed.'
        },
        functionCall: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FunctionCall'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values.'
        },
        functionResponse: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FunctionResponse'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model.'
        },
        text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Text',
            description: 'Optional. Text part (can be code).'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'Part',
    description: `A datatype containing media content.

Exactly one field within a Part should be set, representing the specific type
of content being conveyed. Using multiple fields within the same \`Part\`
instance is considered invalid.`
} as const;

export const $ProgramBroadcastHistoryCreate = {
    properties: {
        no: {
            type: 'integer',
            minimum: 0,
            title: 'No',
            description: 'Number of broadcast'
        },
        appName: {
            type: 'string',
            title: 'Appname',
            description: 'App name'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid',
            description: 'Listener ID'
        },
        sessionId: {
            type: 'string',
            title: 'Sessionid',
            description: 'Session ID'
        },
        artifactId: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Artifactid',
            description: 'Artifact ID'
        },
        status: {
            '$ref': '#/components/schemas/ProgramBroadcastHistoryStatus',
            description: 'Status',
            default: 'generating'
        }
    },
    type: 'object',
    required: ['no', 'appName', 'listenerId', 'sessionId'],
    title: 'ProgramBroadcastHistoryCreate',
    description: 'Schema for creating a ProgramBroadcastHistory.'
} as const;

export const $ProgramBroadcastHistorySchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        no: {
            type: 'integer',
            title: 'No'
        },
        appName: {
            type: 'string',
            title: 'Appname'
        },
        listenerId: {
            type: 'string',
            title: 'Listenerid'
        },
        sessionId: {
            type: 'string',
            title: 'Sessionid'
        },
        artifactId: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Artifactid'
        },
        status: {
            '$ref': '#/components/schemas/ProgramBroadcastHistoryStatus'
        },
        newsLetterContents: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Newslettercontents'
        },
        talkScript: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Talkscript'
        },
        dryRun: {
            type: 'boolean',
            title: 'Dryrun',
            default: false
        }
    },
    type: 'object',
    required: ['no', 'appName', 'listenerId', 'sessionId', 'artifactId', 'status', 'newsLetterContents', 'talkScript'],
    title: 'ProgramBroadcastHistorySchema',
    description: 'Schema for ProgramBroadcastHistory response.'
} as const;

export const $ProgramBroadcastHistoryStatus = {
    type: 'string',
    enum: ['prepare', 'generating', 'success', 'failure'],
    title: 'ProgramBroadcastHistoryStatus'
} as const;

export const $ProgramBroadcastHistoryUpdate = {
    properties: {
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProgramBroadcastHistoryStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Status'
        }
    },
    type: 'object',
    title: 'ProgramBroadcastHistoryUpdate',
    description: 'Schema for updating a ProgramBroadcastHistory.'
} as const;

export const $ProgramStatus = {
    type: 'string',
    enum: ['draft', 'active', 'pause'],
    title: 'ProgramStatus',
    description: 'Enum representing the status of a listener program.'
} as const;

export const $PublishSetting = {
    type: 'string',
    enum: ['private', 'limited', 'publish'],
    title: 'PublishSetting',
    description: 'Enum representing the publish setting of a listener program.'
} as const;

export const $RadioCastCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 100,
            minLength: 1,
            title: 'Name',
            description: 'Radio cast name'
        },
        role: {
            '$ref': '#/components/schemas/RadioCastRole',
            default: 'radio personality'
        },
        voiceName: {
            '$ref': '#/components/schemas/VoiceName',
            description: 'For Google GenAI voice'
        },
        personality: {
            type: 'string',
            maxLength: 500,
            minLength: 1,
            title: 'Personality',
            description: 'Personality'
        }
    },
    type: 'object',
    required: ['name', 'voiceName', 'personality'],
    title: 'RadioCastCreateSchema',
    description: 'Schema for creating a RadioCast.'
} as const;

export const $RadioCastRole = {
    type: 'string',
    enum: ['radio personality', 'assistant', 'guest'],
    title: 'RadioCastRole'
} as const;

export const $RadioCastSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        createdAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdat'
        },
        updatedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedat'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        listenerId: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Listenerid'
        },
        role: {
            '$ref': '#/components/schemas/RadioCastRole',
            default: 'radio personality'
        },
        voiceName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Voicename'
        },
        personality: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Personality'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'RadioCastSchema',
    description: 'Schema for RadioCast response.'
} as const;

export const $RadioCastUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        role: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RadioCastRole'
                },
                {
                    type: 'null'
                }
            ]
        },
        voiceName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Voicename'
        },
        personality: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Personality'
        }
    },
    type: 'object',
    title: 'RadioCastUpdateSchema',
    description: 'Schema for updating a RadioCast.'
} as const;

export const $RagChunk = {
    properties: {
        pageSpan: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RagChunkPageSpan'
                },
                {
                    type: 'null'
                }
            ],
            description: 'If populated, represents where the chunk starts and ends in the document.'
        },
        text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Text',
            description: 'The content of the chunk.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'RagChunk',
    description: 'A RagChunk includes the content of a chunk of a RagFile, and associated metadata.'
} as const;

export const $RagChunkPageSpan = {
    properties: {
        firstPage: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Firstpage',
            description: 'Page where chunk starts in the document. Inclusive. 1-indexed.'
        },
        lastPage: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastpage',
            description: 'Page where chunk ends in the document. Inclusive. 1-indexed.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'RagChunkPageSpan',
    description: 'Represents where the chunk starts and ends in the document.'
} as const;

export const $RetrievalMetadata = {
    properties: {
        googleSearchDynamicRetrievalScore: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Googlesearchdynamicretrievalscore',
            description: 'Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'RetrievalMetadata',
    description: 'Metadata related to retrieval in the grounding flow.'
} as const;

export const $SearchEntryPoint = {
    properties: {
        renderedContent: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Renderedcontent',
            description: 'Optional. Web content snippet that can be embedded in a web page or an app webview.'
        },
        sdkBlob: {
            anyOf: [
                {
                    type: 'string',
                    format: 'base64url'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sdkblob',
            description: 'Optional. Base64 encoded JSON representing array of tuple.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'SearchEntryPoint',
    description: 'Google search entry point.'
} as const;

export const $SecuritySchemeType = {
    type: 'string',
    enum: ['apiKey', 'http', 'oauth2', 'openIdConnect'],
    title: 'SecuritySchemeType'
} as const;

export const $Segment = {
    properties: {
        endIndex: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Endindex',
            description: 'Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero.'
        },
        partIndex: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Partindex',
            description: 'Output only. The index of a Part object within its parent Content object.'
        },
        startIndex: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Startindex',
            description: 'Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero.'
        },
        text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Text',
            description: 'Output only. The text corresponding to the segment from the response.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'Segment',
    description: 'Segment of the content.'
} as const;

export const $SegmentType = {
    type: 'string',
    enum: ['rss', 'calendar', 'gmail', 'web'],
    title: 'SegmentType',
    description: 'Enum representing the types of segments available in a listener program.'
} as const;

export const $ServiceAccount = {
    properties: {
        serviceAccountCredential: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ServiceAccountCredential'
                },
                {
                    type: 'null'
                }
            ]
        },
        scopes: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Scopes'
        },
        useDefaultCredential: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usedefaultcredential',
            default: false
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['scopes'],
    title: 'ServiceAccount',
    description: 'Represents Google Service Account configuration.'
} as const;

export const $ServiceAccountCredential = {
    properties: {
        type: {
            type: 'string',
            title: 'Type',
            default: ''
        },
        projectId: {
            type: 'string',
            title: 'Projectid'
        },
        privateKeyId: {
            type: 'string',
            title: 'Privatekeyid'
        },
        privateKey: {
            type: 'string',
            title: 'Privatekey'
        },
        clientEmail: {
            type: 'string',
            title: 'Clientemail'
        },
        clientId: {
            type: 'string',
            title: 'Clientid'
        },
        authUri: {
            type: 'string',
            title: 'Authuri'
        },
        tokenUri: {
            type: 'string',
            title: 'Tokenuri'
        },
        authProviderX509CertUrl: {
            type: 'string',
            title: 'Authproviderx509Certurl'
        },
        clientX509CertUrl: {
            type: 'string',
            title: 'Clientx509Certurl'
        },
        universeDomain: {
            type: 'string',
            title: 'Universedomain'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['projectId', 'privateKeyId', 'privateKey', 'clientEmail', 'clientId', 'authUri', 'tokenUri', 'authProviderX509CertUrl', 'clientX509CertUrl', 'universeDomain'],
    title: 'ServiceAccountCredential',
    description: `Represents Google Service Account configuration.

Attributes:
  type: The type should be "service_account".
  project_id: The project ID.
  private_key_id: The ID of the private key.
  private_key: The private key.
  client_email: The client email.
  client_id: The client ID.
  auth_uri: The authorization URI.
  token_uri: The token URI.
  auth_provider_x509_cert_url: URL for auth provider's X.509 cert.
  client_x509_cert_url: URL for the client's X.509 cert.
  universe_domain: The universe domain.

Example:

    config = ServiceAccountCredential(
        type_="service_account",
        project_id="your_project_id",
        private_key_id="your_private_key_id",
        private_key="-----BEGIN PRIVATE KEY-----...",
        client_email="...@....iam.gserviceaccount.com",
        client_id="your_client_id",
        auth_uri="https://accounts.google.com/o/oauth2/auth",
        token_uri="https://oauth2.googleapis.com/token",
        auth_provider_x509_cert_url="https://www.googleapis.com/oauth2/v1/certs",
        client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/...",
        universe_domain="googleapis.com"
    )


    config = ServiceAccountConfig.model_construct(**{
        ...service account config dict
    })`
} as const;

export const $Session = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        appName: {
            type: 'string',
            title: 'Appname'
        },
        userId: {
            type: 'string',
            title: 'Userid'
        },
        state: {
            additionalProperties: true,
            type: 'object',
            title: 'State'
        },
        events: {
            items: {
                '$ref': '#/components/schemas/Event'
            },
            type: 'array',
            title: 'Events'
        },
        lastUpdateTime: {
            type: 'number',
            title: 'Lastupdatetime',
            default: 0
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'appName', 'userId'],
    title: 'Session',
    description: `Represents a series of interactions between a user and agents.

Attributes:
  id: The unique identifier of the session.
  app_name: The name of the app.
  user_id: The id of the user.
  state: The state of the session.
  events: The events of the session, e.g. user input, model response, function
    call/response, etc.
  last_update_time: The last update time of the session.`
} as const;

export const $TrafficType = {
    type: 'string',
    enum: ['TRAFFIC_TYPE_UNSPECIFIED', 'ON_DEMAND', 'PROVISIONED_THROUGHPUT'],
    title: 'TrafficType',
    description: `Output only.

Traffic type. This shows whether a request consumes Pay-As-You-Go or
Provisioned Throughput quota.`
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $VideoMetadata = {
    properties: {
        fps: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fps',
            description: `The frame rate of the video sent to the model. If not specified, the
        default value will be 1.0. The fps range is (0.0, 24.0].`
        },
        endOffset: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Endoffset',
            description: 'Optional. The end offset of the video.'
        },
        startOffset: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Startoffset',
            description: 'Optional. The start offset of the video.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VideoMetadata',
    description: 'Describes how the video in the Part should be used by the model.'
} as const;

export const $VoiceName = {
    type: 'string',
    enum: ['Bright', 'Upbeat', 'Informative', 'Firm', 'Excitable', 'Youthful', 'Breezy', 'Easy', 'Breathy', 'Clear', 'Smooth', 'Gravelly', 'Soft', 'Even', 'Mature', 'Forward', 'Friendly', 'Casual', 'Gentle', 'Lively', 'Knowledgeable', 'Warm'],
    title: 'VoiceName'
} as const;