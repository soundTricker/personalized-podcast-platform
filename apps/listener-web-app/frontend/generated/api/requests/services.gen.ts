// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostApiV1ListenersSignupData, PostApiV1ListenersSignupResponse, GetApiV1ListenersMeResponse, GetApiV1ListenerProgramsResponse, PostApiV1ListenerProgramsData, PostApiV1ListenerProgramsResponse, GetApiV1ListenerProgramsByListenerProgramIdData, GetApiV1ListenerProgramsByListenerProgramIdResponse, PutApiV1ListenerProgramsByListenerProgramIdData, PutApiV1ListenerProgramsByListenerProgramIdResponse, DeleteApiV1ListenerProgramsByListenerProgramIdData, DeleteApiV1ListenerProgramsByListenerProgramIdResponse, PostApiV1ListenerProgramsByListenerProgramIdGeneratePodcastData, PostApiV1ListenerProgramsByListenerProgramIdGeneratePodcastResponse, GetApiV1ListenerProgramsByProgramIdSegmentsData, GetApiV1ListenerProgramsByProgramIdSegmentsResponse, PutApiV1ListenerProgramsByProgramIdSegmentsData, PutApiV1ListenerProgramsByProgramIdSegmentsResponse, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryData, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryResponse, PostApiV1ListenerProgramsByProgramIdBroadcastHistoryData, PostApiV1ListenerProgramsByProgramIdBroadcastHistoryResponse, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse, PutApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData, PutApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse, DeleteApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData, DeleteApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse, PostApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdGeneratePodcastData, PostApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdGeneratePodcastResponse, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdAudioData, GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdAudioResponse, PostApiV1RadioCastsData, PostApiV1RadioCastsResponse, GetApiV1RadioCastsData, GetApiV1RadioCastsResponse, GetApiV1RadioCastsByRadioCastIdData, GetApiV1RadioCastsByRadioCastIdResponse, PutApiV1RadioCastsByRadioCastIdData, PutApiV1RadioCastsByRadioCastIdResponse, DeleteApiV1RadioCastsByRadioCastIdData, DeleteApiV1RadioCastsByRadioCastIdResponse, GetApiV1PodcastRssByProgramIdData, GetApiV1PodcastRssByProgramIdResponse, GetApiV1PodcastCoverByProgramIdData, GetApiV1PodcastCoverByProgramIdResponse, GetApiV1PodcastAudioByProgramIdByBroadcastHistoryIdData, GetApiV1PodcastAudioByProgramIdByBroadcastHistoryIdResponse, GetApiV1GoogleOauth2Data, GetApiV1GoogleOauth2Response, GetApiV1GoogleOauth2CallbackData, GetApiV1GoogleOauth2CallbackResponse, PostApiV1AgentsByAppNameSessionData, PostApiV1AgentsByAppNameSessionResponse, GetApiV1AgentsByAppNameSessionBySessionIdData, GetApiV1AgentsByAppNameSessionBySessionIdResponse, PostApiV1AgentsChatData, PostApiV1AgentsChatResponse, GetResponse } from './types.gen';

export class ListenersService {
    /**
     * Signup
     * Create a new listener (signup).
     *
     * This endpoint uses the Firebase ID token to get the user's email and ID,
     * and creates a new listener in the database.
     *
     * If a listener with the given ID already exists, a 409 Conflict error is returned.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ListenerSchema Successful Response
     * @throws ApiError
     */
    public static postApiV1ListenersSignup(data: PostApiV1ListenersSignupData = {}): CancelablePromise<PostApiV1ListenersSignupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/listeners/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Current Listener
     * Get the current listener.
     *
     * This endpoint uses the Firebase ID token to get the user's ID,
     * and returns the corresponding listener from the database.
     *
     * If the listener does not exist, a 404 Not Found error is returned.
     * @returns ListenerSchema Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenersMe(): CancelablePromise<GetApiV1ListenersMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listeners/me'
        });
    }
    
}

export class ListenerProgramsService {
    /**
     * List Listener Programs
     * List listener programs for the current user.
     * @returns ListenerProgramSchema Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerPrograms(): CancelablePromise<GetApiV1ListenerProgramsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/'
        });
    }
    
    /**
     * Create Listener Program
     * Create a new listener program.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ListenerProgramSchema Successful Response
     * @throws ApiError
     */
    public static postApiV1ListenerPrograms(data: PostApiV1ListenerProgramsData): CancelablePromise<PostApiV1ListenerProgramsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/listener-programs/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Listener Program
     * Get a listener program by ID.
     *
     * Only the owner of the program can retrieve it.
     * @param data The data for the request.
     * @param data.listenerProgramId
     * @returns ListenerProgramSchema Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerProgramsByListenerProgramId(data: GetApiV1ListenerProgramsByListenerProgramIdData): CancelablePromise<GetApiV1ListenerProgramsByListenerProgramIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/{listener_program_id}',
            path: {
                listener_program_id: data.listenerProgramId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Listener Program
     * Update a listener program.
     *
     * Only the owner of the program can update it.
     * @param data The data for the request.
     * @param data.listenerProgramId
     * @param data.requestBody
     * @returns ListenerProgramSchema Successful Response
     * @throws ApiError
     */
    public static putApiV1ListenerProgramsByListenerProgramId(data: PutApiV1ListenerProgramsByListenerProgramIdData): CancelablePromise<PutApiV1ListenerProgramsByListenerProgramIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/listener-programs/{listener_program_id}',
            path: {
                listener_program_id: data.listenerProgramId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Listener Program
     * Delete a listener program.
     *
     * Only the owner of the program can delete it.
     * @param data The data for the request.
     * @param data.listenerProgramId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteApiV1ListenerProgramsByListenerProgramId(data: DeleteApiV1ListenerProgramsByListenerProgramIdData): CancelablePromise<DeleteApiV1ListenerProgramsByListenerProgramIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/listener-programs/{listener_program_id}',
            path: {
                listener_program_id: data.listenerProgramId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Generate Podcast
     * Generate a podcast for a listener program.
     *
     * If dry_run is True, the podcast will be generated but no changes will be made to the database.
     * @param data The data for the request.
     * @param data.listenerProgramId
     * @param data.dryRun
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiV1ListenerProgramsByListenerProgramIdGeneratePodcast(data: PostApiV1ListenerProgramsByListenerProgramIdGeneratePodcastData): CancelablePromise<PostApiV1ListenerProgramsByListenerProgramIdGeneratePodcastResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/listener-programs/{listener_program_id}/generate-podcast',
            path: {
                listener_program_id: data.listenerProgramId
            },
            query: {
                dry_run: data.dryRun
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ListenerProgramSegmentsService {
    /**
     * List Listener Program Segments
     * List all segments for a listener program.
     *
     * Only the owner of the program can retrieve its segments.
     * @param data The data for the request.
     * @param data.programId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerProgramsByProgramIdSegments(data: GetApiV1ListenerProgramsByProgramIdSegmentsData): CancelablePromise<GetApiV1ListenerProgramsByProgramIdSegmentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/{program_id}/segments',
            path: {
                program_id: data.programId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Listener Program Segments
     * Update segments for a listener program.
     *
     * This will:
     * 1. Update existing segments
     * 2. Create new segments
     * 3. Delete segments that are not in the provided list
     *
     * Only the owner of the program can update its segments.
     * @param data The data for the request.
     * @param data.programId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static putApiV1ListenerProgramsByProgramIdSegments(data: PutApiV1ListenerProgramsByProgramIdSegmentsData): CancelablePromise<PutApiV1ListenerProgramsByProgramIdSegmentsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/listener-programs/{program_id}/segments',
            path: {
                program_id: data.programId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ProgramBroadcastHistoryService {
    /**
     * List Program Broadcast Histories
     * List all broadcast histories for a listener program.
     *
     * Only the owner of the program can retrieve its broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @returns ProgramBroadcastHistorySchema Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerProgramsByProgramIdBroadcastHistory(data: GetApiV1ListenerProgramsByProgramIdBroadcastHistoryData): CancelablePromise<GetApiV1ListenerProgramsByProgramIdBroadcastHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history',
            path: {
                program_id: data.programId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Program Broadcast History
     * Create a new broadcast history for a listener program.
     *
     * Only the owner of the program can create broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @param data.requestBody
     * @returns ProgramBroadcastHistorySchema Successful Response
     * @throws ApiError
     */
    public static postApiV1ListenerProgramsByProgramIdBroadcastHistory(data: PostApiV1ListenerProgramsByProgramIdBroadcastHistoryData): CancelablePromise<PostApiV1ListenerProgramsByProgramIdBroadcastHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history',
            path: {
                program_id: data.programId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Program Broadcast History
     * Get a specific broadcast history for a listener program.
     *
     * Only the owner of the program can retrieve its broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @returns ProgramBroadcastHistorySchema Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryId(data: GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData): CancelablePromise<GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history/{broadcast_history_id}',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Program Broadcast History
     * Update a broadcast history for a listener program.
     *
     * Only the owner of the program can update broadcast histories.
     * Currently, only the status can be updated.
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @param data.requestBody
     * @returns ProgramBroadcastHistorySchema Successful Response
     * @throws ApiError
     */
    public static putApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryId(data: PutApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData): CancelablePromise<PutApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history/{broadcast_history_id}',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Program Broadcast History
     * Delete a broadcast history for a listener program.
     *
     * Only the owner of the program can delete broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryId(data: DeleteApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdData): CancelablePromise<DeleteApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history/{broadcast_history_id}',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Generate Podcast
     * Get a specific broadcast history for a listener program.
     *
     * Only the owner of the program can retrieve its broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @param data.dryRun
     * @returns ProgramBroadcastHistorySchema Successful Response
     * @throws ApiError
     */
    public static postApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdGeneratePodcast(data: PostApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdGeneratePodcastData): CancelablePromise<PostApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdGeneratePodcastResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history/{broadcast_history_id}/generate-podcast',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            query: {
                dry_run: data.dryRun
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Program Broadcast History Audio
     * Get a specific broadcast history for a listener program.
     *
     * Only the owner of the program can retrieve its broadcast histories.
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdAudio(data: GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdAudioData): CancelablePromise<GetApiV1ListenerProgramsByProgramIdBroadcastHistoryByBroadcastHistoryIdAudioResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/listener-programs/{program_id}/broadcast_history/{broadcast_history_id}/audio',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RadioCastsService {
    /**
     * Create Radio Cast
     * Create a new radio cast.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RadioCastSchema Successful Response
     * @throws ApiError
     */
    public static postApiV1RadioCasts(data: PostApiV1RadioCastsData): CancelablePromise<PostApiV1RadioCastsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/radio-casts/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Radio Casts
     * List radio casts for the current user.
     *
     * If radio_cast_ids is provided, only returns radio casts with matching IDs.
     * Only predefined radio casts or radio casts owned by the current user will be returned.
     * @param data The data for the request.
     * @param data.radioCastIds
     * @returns RadioCastSchema Successful Response
     * @throws ApiError
     */
    public static getApiV1RadioCasts(data: GetApiV1RadioCastsData = {}): CancelablePromise<GetApiV1RadioCastsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/radio-casts/',
            query: {
                radio_cast_ids: data.radioCastIds
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Radio Cast
     * Get a radio cast by ID.
     *
     * Only the owner of the radio cast can retrieve it.
     * @param data The data for the request.
     * @param data.radioCastId
     * @returns RadioCastSchema Successful Response
     * @throws ApiError
     */
    public static getApiV1RadioCastsByRadioCastId(data: GetApiV1RadioCastsByRadioCastIdData): CancelablePromise<GetApiV1RadioCastsByRadioCastIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/radio-casts/{radio_cast_id}',
            path: {
                radio_cast_id: data.radioCastId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Radio Cast
     * Update a radio cast.
     *
     * Only the owner of the radio cast can update it.
     * @param data The data for the request.
     * @param data.radioCastId
     * @param data.requestBody
     * @returns RadioCastSchema Successful Response
     * @throws ApiError
     */
    public static putApiV1RadioCastsByRadioCastId(data: PutApiV1RadioCastsByRadioCastIdData): CancelablePromise<PutApiV1RadioCastsByRadioCastIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/radio-casts/{radio_cast_id}',
            path: {
                radio_cast_id: data.radioCastId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Radio Cast
     * Delete a radio cast.
     *
     * Only the owner of the radio cast can delete it.
     * @param data The data for the request.
     * @param data.radioCastId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteApiV1RadioCastsByRadioCastId(data: DeleteApiV1RadioCastsByRadioCastIdData): CancelablePromise<DeleteApiV1RadioCastsByRadioCastIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/radio-casts/{radio_cast_id}',
            path: {
                radio_cast_id: data.radioCastId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PodcastService {
    /**
     * Get Podcast Rss
     * Get RSS feed for a podcast program.
     *
     * This is a public API endpoint that generates RSS feeds for podcasts.
     *
     * Args:
     * program_id: The ID of the program.
     * private_key: The private key for limited access (optional).
     *
     * Returns:
     * RSS feed as XML response.
     *
     * Raises:
     * HTTPException:
     * - 404 if program not found
     * - 400 if program is private or invalid private key for limited access
     * @param data The data for the request.
     * @param data.programId
     * @param data.privateKey Private key for limited access
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1PodcastRssByProgramId(data: GetApiV1PodcastRssByProgramIdData): CancelablePromise<GetApiV1PodcastRssByProgramIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/podcast/rss/{program_id}',
            path: {
                program_id: data.programId
            },
            query: {
                private_key: data.privateKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Podcast Cover
     * Get cover art image for a podcast program.
     *
     * This endpoint serves the cover art images for podcasts.
     * This is a public API endpoint that requires access control based on program settings.
     *
     * Args:
     * program_id: The ID of the program.
     * private_key: The private key for limited access (optional).
     *
     * Returns:
     * Image file response or redirect to signed URL.
     *
     * Raises:
     * HTTPException:
     * - 404 if program not found or cover art not available
     * - 400 if program is private or invalid private key for limited access
     * @param data The data for the request.
     * @param data.programId
     * @param data.privateKey Private key for limited access
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1PodcastCoverByProgramId(data: GetApiV1PodcastCoverByProgramIdData): CancelablePromise<GetApiV1PodcastCoverByProgramIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/podcast/cover/{program_id}',
            path: {
                program_id: data.programId
            },
            query: {
                private_key: data.privateKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Podcast Audio
     * Get audio file for a podcast episode.
     *
     * This endpoint serves the actual audio files referenced in the RSS feed enclosure tags.
     * This is a public API endpoint that requires access control based on program settings.
     *
     * Args:
     * program_id: The ID of the program.
     * broadcast_history_id: The ID of the broadcast history.
     * private_key: The private key for limited access (optional).
     *
     * Returns:
     * Audio file response or redirect to signed URL.
     *
     * Raises:
     * HTTPException:
     * - 404 if program or broadcast history not found
     * - 400 if program is private or invalid private key for limited access
     * @param data The data for the request.
     * @param data.programId
     * @param data.broadcastHistoryId
     * @param data.privateKey Private key for limited access
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1PodcastAudioByProgramIdByBroadcastHistoryId(data: GetApiV1PodcastAudioByProgramIdByBroadcastHistoryIdData): CancelablePromise<GetApiV1PodcastAudioByProgramIdByBroadcastHistoryIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/podcast/audio/{program_id}/{broadcast_history_id}',
            path: {
                program_id: data.programId,
                broadcast_history_id: data.broadcastHistoryId
            },
            query: {
                private_key: data.privateKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class GoogleOauth2Service {
    /**
     * Google Oauth2
     * Initiate the Google OAuth2 flow.
     *
     * Args:
     * scopes: The list of scopes to request.
     * user_id: The ID of the current user.
     * settings: The project settings
     *
     * Returns:
     * A redirect to the Google authorization URL.
     * @param data The data for the request.
     * @param data.scopes The list of scopes to request
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getApiV1GoogleOauth2(data: GetApiV1GoogleOauth2Data): CancelablePromise<GetApiV1GoogleOauth2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/google-oauth2',
            query: {
                scopes: data.scopes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Google Oauth2 Callback
     * Handle the Google OAuth2 callback.
     *
     * Args:
     * code: The authorization code.
     * state: The state parameter containing the user ID.
     *
     * Returns:
     * A redirect to the frontend.
     * @param data The data for the request.
     * @param data.code The authorization code
     * @param data.state The state parameter containing the user ID
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiV1GoogleOauth2Callback(data: GetApiV1GoogleOauth2CallbackData): CancelablePromise<GetApiV1GoogleOauth2CallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/google-oauth2/callback',
            query: {
                code: data.code,
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AgentsService {
    /**
     * Create Session
     * Create a new chat session.
     * @param data The data for the request.
     * @param data.appName
     * @param data.requestBody
     * @returns Session Successful Response
     * @throws ApiError
     */
    public static postApiV1AgentsByAppNameSession(data: PostApiV1AgentsByAppNameSessionData): CancelablePromise<PostApiV1AgentsByAppNameSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agents/{app_name}/session',
            path: {
                app_name: data.appName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Session
     * Get a chat session.
     * @param data The data for the request.
     * @param data.appName
     * @param data.sessionId
     * @returns Session Successful Response
     * @throws ApiError
     */
    public static getApiV1AgentsByAppNameSessionBySessionId(data: GetApiV1AgentsByAppNameSessionBySessionIdData): CancelablePromise<GetApiV1AgentsByAppNameSessionBySessionIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agents/{app_name}/session/{session_id}',
            path: {
                app_name: data.appName,
                session_id: data.sessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Chat
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiV1AgentsChat(data: PostApiV1AgentsChatData): CancelablePromise<PostApiV1AgentsChatResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agents/chat',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DefaultService {
    /**
     * Root
     * Root endpoint that returns a welcome message.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static get(): CancelablePromise<GetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/'
        });
    }
    
}